// epic_atn.dxl
/*
*  Script to set objects in selected modules to have Project includes EPIC ATN
*  if Project includes EPIC AOA
*  Adds EPIC ATN to the Project attribute if this is not present
*
*	Add attribute definition and type ""EPIC Criticality" and fill it up if the Project attribute contains any "EPIC" project.
*
*  "Apply" reports on changes to be made AND attempts to make those changes
*
*  "Create minor baseline" creates new minor baseline, when modul was modified and sets following comment: Project EPIC ATN and attribute EPIC CRITICALITY were added."
*
*  "Set C ..." sets "C" in newly created attribute EPIC CRITICALITY
*  "Set D ..." sets "D" in newly created attribute EPIC CRITICALITY
*  "Set E ..." sets "E" in newly created attribute EPIC CRITICALITY
*
*  Results are logged to c:\temp\epicATNscript.txt
*
*  May 29, 2008 jsedlak   Initial release
*
*/
pragma runLim, 0

const string TITLE = "Add EPIC ATN and Add EPIC Criticality Attribute"
const string FORMAL = "Formal"
const string PROJECT = "Project"
const string PROJECT_AOA = "EPIC AOA"
const string PROJECT_POA = "EPIC POA"
const string PROJECT_ATN = "EPIC ATN"
const string PROJECT_EPIC = "EPIC"
const string PROJECT_PM_CPDLC = "PM-CPDLC"
const string NEW_ATTRIBUTE = "EPIC Criticality"
const string SW_RELEASE = "EPIC Block 2.0"
const string SW_RELEASE_ATTR = "SW Release"
const string DASHES = "- - - - -"
string names[] = {"C","D","E", DASHES}
string def_part[] = {"C", "D", "E"}
const string NULLS[] = {}

AttrDef AttDef
AttrType AttTyp
Buffer Results
DB Db
DBE FldrSpecDbe, FldrSpecBrowseDbe, ModNamesDbe, ResultsDbe, SetCDDbe, dbeCreateBaseline, dbeForceScript
Item Itm
Module CurMod, Mod
Object Obj
Skip ModNames
bool ProgressCancelled, SetC, SetD, SetE, CreateBaseline, HasProjectATNOption, HasSWReleaseOption, ForceScript, CritAdded, ProjectAdded, EPICCritAdded
int ProgressInt, ProgressLimit
string SelectedFldrSpec, ModName, SelectedModName, CurModSpec, ErrMsg

bool HasAttribute(string attName, AttrBaseType attBasTyp, bool isMulti) {
    AttDef = find(Mod, attName)
    if (null AttDef or ! AttDef.object) {
        return false
    }
    if (attBasTyp == attrEnumeration) {
        if (isMulti != AttDef.multi) {
            //			((Results += "\t{\\b ERROR: Incorrect multi-value setting on attribute: ") += attName) += "}\n"
            return false
        }
    }
    AttTyp = AttDef.type
    if (AttTyp.type != attBasTyp) {
        //		((Results += "\t{\\b ERROR: Incorrect base type for attribute: ") += attName) += "}\n"
        return false
    }
    return true
}

bool AddAttribute()
{
    string mess = ""
    AttrType at = null
    at = create(NEW_ATTRIBUTE, names, mess)

    if (null at)
    {
        string s = lastError
        print s
        return false
    }
    else
    {
        AttrDef ad = create object type NEW_ATTRIBUTE multi true attribute NEW_ATTRIBUTE
        if (!null ad)
        Results += "\tAttribute was added.\n"
        else
        return false
    }
    return true
}

bool AddATNToProjectTypeIfNecessary() {
    HasProjectATNOption = false
    setRealColorOptionForTypes true
    AttDef = find(Mod, PROJECT)
    if (null AttDef) return false
    AttTyp = AttDef.type
    int i = AttTyp.size
    string newStrings[i+1]
    int newValues[i+1]
    int newColors[i+1]
    int replaces[i+1]
    newStrings[i] = PROJECT_ATN
    newValues[i] = i
    newColors[i] = -1
    replaces[i] = -1
    for (i=0; i<AttTyp.size; i++) {
        newStrings[i] = AttTyp.strings[i]
        if (newStrings[i] == PROJECT_ATN) {
            HasProjectATNOption = true
            return true
        }
        newValues[i] = AttTyp.values[i]
        newColors[i] = AttTyp.colors[i]
        replaces[i] = i
    }
    AttTyp = modify(AttTyp, AttTyp.name, newStrings, newValues, newColors, replaces, ErrMsg)
    if (! null ErrMsg) {
        ((Results += "\t{\\b ERROR: modify type returned: ") += ErrMsg) += "}\n"
        return false
    }
    HasProjectATNOption = true
    return true
}

bool AddSWReleaseTypeIfNecessary() {
    HasSWReleaseOption = false
    setRealColorOptionForTypes true
    AttDef = find(Mod, SW_RELEASE_ATTR)
    if (null AttDef) return false
    if (!AttDef.multi) AttDef = modify(AttDef, setMulti, true)
    AttTyp = AttDef.type
    int i = AttTyp.size
    string newStrings[i+1]
    int newValues[i+1]
    int newColors[i+1]
    int replaces[i+1]
    newStrings[i] = SW_RELEASE
    newValues[i] = i
    newColors[i] = -1
    replaces[i] = -1
    for (i=0; i<AttTyp.size; i++) {
        newStrings[i] = AttTyp.strings[i]
        if (newStrings[i] == SW_RELEASE) {
            HasSWReleaseOption = true
            return false
        }
        newValues[i] = AttTyp.values[i]
        newColors[i] = AttTyp.colors[i]
        replaces[i] = i
    }
    AttTyp = modify(AttTyp, AttTyp.name, newStrings, newValues, newColors, replaces, ErrMsg)
    if (! null ErrMsg) {
        ((Results += "\t{\\b ERROR: modify type returned: ") += ErrMsg) += "}\n"
        return false
    }
    HasSWReleaseOption = true
    return true
}



void ProcessObj() {
    bool PM_CPDLC = isMember(Obj.PROJECT, PROJECT_PM_CPDLC)
    bool AOA = isMember(Obj.PROJECT, PROJECT_AOA)
    bool POA = isMember(Obj.PROJECT, PROJECT_POA)
    bool ATN = isMember(Obj.PROJECT, PROJECT_ATN)
    bool EPIC = isMember(Obj.PROJECT, PROJECT_EPIC)

    if (!ProjectAdded && (AOA || EPIC || PM_CPDLC))
    {
        AddATNToProjectTypeIfNecessary()
        AddSWReleaseTypeIfNecessary()
        ProjectAdded = true
    }

    if (!EPICCritAdded && (AOA || POA || ATN || EPIC || PM_CPDLC))
    {
        if (!HasAttribute(NEW_ATTRIBUTE, attrEnumeration, true)){
            process = true
            CritAdded = AddAttribute()
            if (!CritAdded) Results += "\tCan not create attribute.\n"
        }
        else
            CritAdded = false

        EPICCritAdded = true
    }

    if ((PM_CPDLC || AOA || EPIC) && !ATN) {
        if (canModify(Obj.PROJECT)) {
            Obj.PROJECT += PROJECT_ATN
            if (HasSWReleaseOption && PM_CPDLC && !isMember(Obj.SW_RELEASE_ATTR, SW_RELEASE)){
                Obj.SW_RELEASE_ATTR += SW_RELEASE
            }
        }
        else {
            Results += "\t\t{\\b ERROR: Cannot modify attribute value in "(identifier Obj)"}\n"
        }
    }
}

void ProcessObj2() {
    bool PM_CPDLC = isMember(Obj.PROJECT, PROJECT_PM_CPDLC)
    bool AOA = isMember(Obj.PROJECT, PROJECT_AOA)
    bool POA = isMember(Obj.PROJECT, PROJECT_POA)
    bool ATN = isMember(Obj.PROJECT, PROJECT_ATN)
    bool EPIC = isMember(Obj.PROJECT, PROJECT_EPIC)

    if (AOA || POA || ATN || EPIC || PM_CPDLC)
    {
        if (SetC && !isMember(Obj.NEW_ATTRIBUTE, "C")) then Obj.NEW_ATTRIBUTE += "C"
        if (SetD && !isMember(Obj.NEW_ATTRIBUTE, "D")) then Obj.NEW_ATTRIBUTE += "D"
        if (SetE && !isMember(Obj.NEW_ATTRIBUTE, "E")) then Obj.NEW_ATTRIBUTE += "E"
    }
    else
    Obj.NEW_ATTRIBUTE = DASHES
}

void ProcessMod() {
    ProjectAdded = false
    EPICCritAdded = false

    if (HasAttribute(PROJECT, attrEnumeration, true))
    {
        for Obj in Mod do {
            ProcessObj()
        }
        if (EPICCritAdded && CritAdded) {
            for Obj in Mod do {
                ProcessObj()
            }
        }
    }
}

void ProcessSelectedModName() {
    progressMessage "Processing " SelectedModName
    Baseline bas
    Date d
    Mod = edit(SelectedFldrSpec "/" SelectedModName, false, false)
    if (null Mod or ! isEdit Mod) {
        ((Results += "\tERROR: Could not edit module: ") += SelectedModName) += "\n"
        return
    }

    if (!ForceScript){
        bas = getMostRecentBaseline(Mod)
        d = Mod."Last Modified On"
        if ((null bas) || (dateOf(bas) < d)){
            Results += "\tERROR: Modul isn't baselined or is modified.\n"
            if (isVisible Mod) {
                refresh Mod
                refreshExplorer Mod
            } else {
                close Mod
            }
            return
        }
    }

    ProcessMod()

    bool uns = unsaved Mod
    if (uns) {
        progressMessage "Saving changes to module " SelectedModName
        save Mod
        if (CreateBaseline)
            create(Mod, nextMinor, "Project EPIC ATN and attribute EPIC CRITICALITY were added.")
    }

    if (isVisible Mod) {
        refresh Mod
        refreshExplorer Mod
    } else {
        if (!(uns && CreateBaseline))
        close Mod
    }
}

void DiscardChanges() {
    for SelectedModName in ModNamesDbe do {
        Mod = module item SelectedFldrSpec "/" SelectedModName
        if (! null Mod && ! isVisible Mod && unsaved Mod) close(Mod, false)
    }
}

void DoIt() {
    int i = get SetCDDbe

    SetC = ((i & 1) == 1)
    SetD = ((i & 2) == 2)
    SetE = ((i & 4) == 4)

    ForceScript = get dbeForceScript
    CreateBaseline = get dbeCreateBaseline
    Results = create
    set(ResultsDbe, "")
    ProgressInt = ProgressLimit = 0
    ProgressCancelled = false
    for SelectedModName in ModNamesDbe do ProgressLimit++
    if (ProgressLimit == 0) {
        errorBox "Please select module(s) to process"
        return
    }
    progressStart(Db, TITLE, "", ProgressLimit)
    for SelectedModName in ModNamesDbe do {
        if (length Results > 0) Results += '\n'
        ((Results += "Processing ") += SelectedModName) += '\n'
        ProcessSelectedModName
        progressStep ++ProgressInt
        if (progressCancelled) {
            ProgressCancelled = true
            break
        }
    }
    progressStop
    if (ProgressCancelled) {
        infoBox "Operation was canceled by the user"
        DiscardChanges
    } else {
        setFromBuffer(ResultsDbe, Results)
    }
    string filename = "c:\\temp\\epicATNscript.txt"
    Stream out = write filename
    out << Results
    close out
    delete Results
    raise Db
}

void ApplySelected(DB db) {
    DoIt
}

void PopulateModNamesDbe() {
    empty ModNamesDbe
    for Itm in folder SelectedFldrSpec do {
        if (type Itm != FORMAL) continue
        ModName = name Itm
        put(ModNames, ModName, ModName)
    }
    int i = 0
    for ModName in ModNames do {
        insert(ModNamesDbe, i, ModName)
        if (SelectedFldrSpec "/" ModName == CurModSpec) set(ModNamesDbe, i, true)
        i++
        delete(ModNames, ModName)
    }
}

void FldrSpecBrowseDbeSelected(DBE dbe) {
    SelectedFldrSpec = fnMiniExplorer(Db, MINI_EXP_FP, null, null)
    if (! folder SelectedFldrSpec) return
    set(FldrSpecDbe, SelectedFldrSpec)
    PopulateModNamesDbe
}

void CloseSelected(DB db) {
    delete ModNames
    hide db
}

ModNames = createString
SelectedFldrSpec = fullName current Folder
CurMod = current Module
if (null CurMod) {
    CurModSpec = ""
} else {
    CurModSpec = fullName CurMod
}
Db = create(TITLE, styleCentered)
FldrSpecDbe = field(Db, "Folder to process:", SelectedFldrSpec, 40, true)
beside Db
FldrSpecBrowseDbe = button(Db, "Browse...", FldrSpecBrowseDbeSelected)
left Db
label(Db, "Select module(s) to process:")
ModNamesDbe = listView(Db, listViewOptionMultiselect, 400, 15, NULLS)

SetCDDbe = checkBox(Db, "Set as Default value for Criticality:", def_part, 2)

dbeCreateBaseline = toggle(Db, "Create minor baseline", false)
dbeForceScript = toggle(Db, "Run script in every cases", false)

ResultsDbe = richText(Db, "Results", "", 400, 300, true)
apply(Db, "Apply", ApplySelected)
close(Db, true, CloseSelected)
realize Db
setExtraHeightShare(ModNamesDbe, 0.5)
setExtraHeightShare(ResultsDbe, 0.5)
insertColumn(ModNamesDbe, 0, "Module Name", 394, iconNone)
PopulateModNamesDbe
setCenteredSize(Db, 450, 650)
show Db
